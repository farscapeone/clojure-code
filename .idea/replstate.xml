<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1417759053485">{:repl-history {:ide [], :local [&quot;(loop [np 1\n       n 2\n       t 0]\n  (if (&gt; n 10)\n    t\n    (recur n \n           (+ n np)\n           (if (= 0 (rem n 2))\n             (+ t n)\n             t))))&quot; &quot;(loop [np 1\n       n 2\n       t 0]\n  (if (&gt; n 30)\n    t\n    (recur n \n           (+ n np)\n           (if (= 0 (rem n 2))\n             (+ t n)\n             t))))&quot; &quot;(loop [np 1\n       n 2\n       t 0]\n  (if (&gt; n 40)\n    t\n    (recur n \n           (+ n np)\n           (if (= 0 (rem n 2))\n             (+ t n)\n             t))))&quot; &quot;(loop [np 1\n       n 2\n       t 0]\n  (if (&gt; n 90)\n    t\n    (recur n \n           (+ n np)\n           (if (= 0 (rem n 2))\n             (+ t n)\n             t))))&quot; &quot;(loop [np 1 n 2 t 0]\n  (if (&gt; n 4000000)\n    t\n    (recur n \n           (+ n np)\n           (if (= 0 (rem n 2))\n             (+ t n)\n             t))))&quot; &quot;(loop [np 1 n 2 t 0] (if (&gt; n 4000000) t (recur n (+ n np) (if (= 0 (rem n 2)) (+ t n) t))))&quot; &quot;(ns stringcalc.core-test\n  (:require [clojure.test :refer :all]\n            [stringcalc.core :refer :all]))\n\n(deftest my-test-suite\n  (is (= 0 (add \&quot;\&quot;)) \&quot;Test for empty strings\&quot;)\n  (is (= 1 (add \&quot;1\&quot;)) \&quot;Test for 1 number\&quot;)\n  (is (= 3 (add \&quot;1,2\&quot;)) \&quot;Test for 2 numbers\&quot;)\n  (is (= 6 (add \&quot;1,2\\n3\&quot;)) \&quot;Test for commas AND newlines\&quot;)\n  (is (= 6 (add \&quot;//;\\n1;2;3\&quot;)) \&quot;Test for custom delimiter\&quot;)\n  (is (thrown-with-msg? stringcalc.NegativesNotAllowedException #\&quot;-2,-12\&quot;\n                        (add \&quot;//;\\n1;-2;2;-12;3\&quot;)))\n  (is (= 1006 (add \&quot;//;\\n1;1000;2;3;5000\&quot;)) \&quot;Test for numbers &gt; 1000\&quot;)\n  (is (= 1006 (add \&quot;//[;;;][+++][***]\\n1;;;1000+++2***3;;;5000\&quot;))\n      \&quot;Test for multiple bracketed delimiters\&quot;)\n  )\n\n(range 10)&quot; &quot;(range 10)&quot; &quot;(defn dv? [num div] (= (0 (rem num div))))\n&quot; &quot;(defn dv? [num div] (= (0 (rem num div))))\n(dv? 3 2)&quot; &quot;(ns stringcalc.core\n  (:require [clojure.string :as str]\n            [stringcalc.NegativesNotAllowedException :refer :all]))\n\n(defn sum-with-delims [delim-str num-str]\n  (reduce +\n          (let [num-vec\n                (map #(Integer/parseInt %)\n                     (str/split\n                       (reduce #(str/replace %1 %2 \&quot;\\000\&quot;)\n                               num-str\n                               (re-seq #\&quot;(?&lt;=\\[)[^]]+(?=\\])|(?&lt;=//)[^\\[]\&quot;\n                                       delim-str))\n                       #\&quot;\\000\&quot;))\n                neg-vec (filter neg? num-vec)]\n            (if (empty? neg-vec)\n              (remove #(&gt; % 1000) num-vec)\n              (throw (stringcalc.NegativesNotAllowedException.\n                       (apply str (interpose \&quot;,\&quot; neg-vec))))))))\n\n(defn add [in-str]\n  (cond\n    (.isEmpty in-str) 0\n    (.startsWith in-str \&quot;//\&quot;) (sum-with-delims (first (str/split-lines in-str))\n                                               (second (str/split-lines in-str)))\n    :else (sum-with-delims \&quot;[,][\\n]\&quot; in-str)))\n\n(defn dv? [num div] (= (0 (rem num div))))\n(dv? 3 2)&quot; &quot;\n(defn dv? [num div] (= (0 (rem num div))))\n(dv? 3 2)&quot; &quot;(defn dv? [num div] (= (0 (rem num div))))\n\n(dv? 2 3)&quot; &quot;(defn dvb? [num div] (= (0 (rem num div))))\n(dvb? 2 3)&quot; &quot;(defn dv? [num div] (= (0 (rem num div))))\n(dv? 2 3)&quot; &quot;(ns stringcalc.core\n  (:require [clojure.string :as str]\n            [stringcalc.NegativesNotAllowedException :refer :all]))\n\n(defn sum-with-delims [delim-str num-str]\n  (reduce +\n          (let [num-vec\n                (map #(Integer/parseInt %)\n                     (str/split\n                       (reduce #(str/replace %1 %2 \&quot;\\000\&quot;)\n                               num-str\n                               (re-seq #\&quot;(?&lt;=\\[)[^]]+(?=\\])|(?&lt;=//)[^\\[]\&quot;\n                                       delim-str))\n                       #\&quot;\\000\&quot;))\n                neg-vec (filter neg? num-vec)]\n            (if (empty? neg-vec)\n              (remove #(&gt; % 1000) num-vec)\n              (throw (stringcalc.NegativesNotAllowedException.\n                       (apply str (interpose \&quot;,\&quot; neg-vec))))))))\n\n(defn add [in-str]\n  (cond\n    (.isEmpty in-str) 0\n    (.startsWith in-str \&quot;//\&quot;) (sum-with-delims (first (str/split-lines in-str))\n                                               (second (str/split-lines in-str)))\n    :else (sum-with-delims \&quot;[,][\\n]\&quot; in-str)))\n\n&quot; &quot;(ns stringcalc.core-test\n  (:require [clojure.test :refer :all]\n            [stringcalc.core :refer :all]))\n\n(deftest my-test-suite\n  (is (= 0 (add \&quot;\&quot;)) \&quot;Test for empty strings\&quot;)\n  (is (= 1 (add \&quot;1\&quot;)) \&quot;Test for 1 number\&quot;)\n  (is (= 3 (add \&quot;1,2\&quot;)) \&quot;Test for 2 numbers\&quot;)\n  (is (= 6 (add \&quot;1,2\\n3\&quot;)) \&quot;Test for commas AND newlines\&quot;)\n  (is (= 6 (add \&quot;//;\\n1;2;3\&quot;)) \&quot;Test for custom delimiter\&quot;)\n  (is (thrown-with-msg? stringcalc.NegativesNotAllowedException #\&quot;-2,-12\&quot;\n                        (add \&quot;//;\\n1;-2;2;-12;3\&quot;)))\n  (is (= 1006 (add \&quot;//;\\n1;1000;2;3;5000\&quot;)) \&quot;Test for numbers &gt; 1000\&quot;)\n  (is (= 1006 (add \&quot;//[;;;][+++][***]\\n1;;;1000+++2***3;;;5000\&quot;))\n      \&quot;Test for multiple bracketed delimiters\&quot;)\n  )\n\n(defn dv? [num div] (= (0 (rem num div))))\n(dv? 2 3)&quot; &quot;(defn div? [numerator divisor] (= (0 (rem numerator divisor))))\n(div? 2 3)&quot; &quot;(defn div? [num div] (= (0 (rem num div))))\n(div? 2 3)&quot; &quot;(defn div? [num div] (= (0 (rem num div))))\n'(div? 2 3)&quot; &quot;(defn div? [num div] (= (0 (rem num div))))\n(str (div? 2 3))&quot; &quot;(defn div? [num div] (= (0 (rem num div))))\n\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      (empty? o)\n      (recur (rest v)\n             (if (div? num (first v))))))\n  )\n\n(loop [iv (range 1000)\n       ov []]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (empty? (prime? ov (first iv)))))))&quot; &quot;(defn div? [num div] (= (0 (rem num div))))\n\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      (empty? o)\n      (recur (rest v)\n             (if (div? num (first v))\n               (conj o num)\n               o))))\n  )\n\n(loop [iv (range 1000)\n       ov []]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (empty? (prime? ov (first iv)))))))&quot; &quot;\n(defn div? [num div] (= (0 (rem num div))))\n\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      (empty? o)\n      (recur (rest v)\n             (if (div? num (first v))\n               (conj o num)\n               o))))\n  )\n&quot; &quot;(defn div? [num div] (= (0 (rem num div))))\n\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      (empty? o)\n      (recur (rest v)\n             (if (div? num (first v))\n               (conj o num)\n               o))))\n  )\n\n(prime? (range 100) 1)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      (empty? o)\n      (recur (rest v)\n             (if (= (0 (rem num (first v)))\n                   (conj o num))\n               o))))\n  )\n\n(prime? (range 100) 1)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)) \n                   (conj o num))\n               o))))\n  )\n\n(prime? (range 100) 1)\n&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v))\n                   (conj o num))\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v))\n                   (conj o num))\n               o))))\n  )\n\n(prime? (range 1 100) 2)\n&quot; &quot;\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n(prime? (range 1 100) 4)\n(prime? (range 1 100) 5)\n(prime? (range 1 100) 6)\n(prime? (range 1 100) 7)\n&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v))\n                   (conj o num))\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n(prime? (range 1 100) 4)\n(prime? (range 1 100) 5)\n(prime? (range 1 100) 6)\n(prime? (range 1 100) 7)\n&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v))\n                   (conj o num))\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v))\n                   (conj o num))\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v))\n                   (conj o num))\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (0 (rem num (first v))\n                        (conj o num)))\n               o))))\n  )\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (0 (rem num (first v))\n                        (conj o num)))\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (= 0 (rem num (first v))\n                        (conj o num)))\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (= 0 (rem num (first v))\n                        (conj o num)))\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (= 0 (rem num (first v))\n                        (conj o num)))\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (= 0 (rem num (first v))\n                        (conj o num)))\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n(prime? (range 1 100) 4)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (= 0 (rem num (first v))\n                        (conj o num)))\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n(prime? (range 1 100) 4)\n(prime? (range 1 100) 5)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v))\n                   (conj o num))\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem num (first v))\n                     (conj o num))\n                 o)\n               o))))\n  )\n&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem num (first v))\n                     (conj o num))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem num (first v))\n                     (do (println (str \&quot;num:\&quot; num))\n                         (conj o num)))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem num (first v))\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem num (first v))\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem num (first v))\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem num (first v))\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n(prime? (range 1 100) 4)\n&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (empty? v)\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n(prime? (range 1 100) 4)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n(prime? (range 1 100) 4)\n(prime? (range 1 100) 5)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (not (and (= num (first v)) (= num 1)))\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)\n               o))))\n  )\n\n(prime? (range 1 100) 1)\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n(prime? (range 1 100) 4)\n(prime? (range 1 100) 5)\n(prime? (range 1 100) 6)\n(prime? (range 1 100) 7)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)))))\n\n(prime? (range 2 100) 1)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)))))\n\n(prime? (range 2 100) 1)\n(prime? (range 1 100) 2)\n&quot; &quot;\n(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)))))\n\n(prime? (range 2 100) 2)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)))))\n\n(prime? (range 2 100) 2)\n(prime? (range 1 100) 3)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)))))\n\n(prime? (range 2 100) 2)\n(prime? (range 1 100) 3)\n(prime? (range 1 100) 4)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n               (if (= 0 (rem (first v) num)\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)))))\n\n(prime? (range 2 100) 2)\n(prime? (range 1 100) 3)\n(prime? (range 1 100) 4)\n(prime? (range 1 100) 5)\n(prime? (range 1 100) 6)\n(prime? (range 1 100) 7)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n               (if (= 0 (rem num (first v))\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)))))\n\n(prime? (range 2 100) 2)\n(prime? (range 1 100) 3)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n               (if (= 0 (rem num (first v))\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)))))\n\n(prime? (range 2 100) 2)\n(prime? (range 1 100) 3)\n(prime? (range 1 100) 4)\n(prime? (range 1 100) 5)\n(prime? (range 1 100) 6)\n(prime? (range 1 100) 7)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n               (if (= 0 (rem num (first v))\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o)))))\n\n(prime? (range 2 100) 2)\n(prime? (range 2 100) 3)\n(prime? (range 2 100) 4)\n(prime? (range 2 100) 5)\n(prime? (range 2 100) 6)\n(prime? (range 2 100) 7)\n&quot; &quot;(= 0 (rem 7 3))&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n               (if (= 0 (rem num (first v)))\n                     (do (println (str \&quot;(first v):\&quot; (first v)))\n                         (conj o (first v))))\n                 o))))\n\n(prime? (range 2 100) 2)\n(prime? (range 2 100) 3)\n(prime? (range 2 100) 4)\n(prime? (range 2 100) 5)\n(prime? (range 2 100) 6)\n(prime? (range 2 100) 7)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (do (println (str \&quot;(first v):\&quot; (first v)))\n                   (conj o (first v)))\n               o)))))\n\n(prime? (range 2 100) 2)\n(prime? (range 2 100) 3)\n(prime? (range 2 100) 4)\n(prime? (range 2 100) 5)\n(prime? (range 2 100) 6)\n(prime? (range 2 100) 7)\n&quot; &quot;\n(prime? (range 2 100) 2)\n(prime? (range 2 100) 3)\n(prime? (range 2 100) 4)\n(prime? (range 2 100) 5)\n(prime? (range 2 100) 6)\n(prime? (range 2 100) 7)\n(prime? (range 2 100) 8)\n(prime? (range 2 100) 9)\n(prime? (range 2 100) 10)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      o\n      ;(empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (do (println (str \&quot;num:\&quot; num \&quot;,\&quot; \&quot;(first v):\&quot; (first v)))\n                   (conj o (first v)))\n               o)))))\n\n(prime? (range 2 100) 2)\n(prime? (range 2 100) 3)\n(prime? (range 2 100) 4)\n(prime? (range 2 100) 5)\n(prime? (range 2 100) 6)\n(prime? (range 2 100) 7)\n(prime? (range 2 100) 8)\n(prime? (range 2 100) 9)\n(prime? (range 2 100) 10)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      ;o\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (do (println (str \&quot;num:\&quot; num \&quot;,\&quot; \&quot;(first v):\&quot; (first v)))\n                   (conj o (first v)))\n               o)))))\n\n(prime? (range 2 100) 2)\n(prime? (range 2 100) 3)\n(prime? (range 2 100) 4)\n(prime? (range 2 100) 5)\n(prime? (range 2 100) 6)\n(prime? (range 2 100) 7)\n(prime? (range 2 100) 8)\n(prime? (range 2 100) 9)\n(prime? (range 2 100) 10)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      ;o\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(prime? (range 2 100) 2)\n(prime? (range 2 100) 3)\n(prime? (range 2 100) 4)\n(prime? (range 2 100) 5)\n(prime? (range 2 100) 6)\n(prime? (range 2 100) 7)\n(prime? (range 2 100) 8)\n(prime? (range 2 100) 9)\n(prime? (range 2 100) 10)\n&quot; &quot;(defn prime? [iv num]\n  (loop [v iv\n         o []]\n    (if (= num (first v))\n      ;o\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(prime? (range 1 100) 2)\n(prime? (range 1 100) 3)\n(prime? (range 1 100) 4)\n(prime? (range 1 100) 5)\n(prime? (range 1 100) 6)\n(prime? (range 1 100) 7)\n(prime? (range 1 100) 8)\n(prime? (range 1 100) 9)\n(prime? (range 1 100) 10)\n&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 num)\n         o []]\n    (if (= num (first v))\n      ;o\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(prime? 2)\n(prime? 3)\n(prime? 4)\n(prime? 5)\n(prime? 6)\n(prime? 7)\n(prime? 8)\n(prime? 9)\n(prime? 10)\n&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 num)\n         o []]\n    (if (= num (first v))\n      ;o\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(prime? 2)\n&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 num)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 num)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(prime? 2)\n&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 10000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(prime? 2)\n(prime? 3)\n&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 100000000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(prime? 1)\n(prime? 2)\n(prime? 3)\n(prime? 4)\n(prime? 5)\n(prime? 6)\n(prime? 7)\n(prime? 8)\n(prime? 9)\n(prime? 10)\n&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 100000000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(prime? 2)\n(prime? 3)\n(prime? 4)\n(prime? 5)\n(prime? 6)\n(prime? 7)\n(prime? 8)\n(prime? 9)\n(prime? 10)\n&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 100000000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 1000)\n       ov []]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 100000000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 1000)\n       ov []]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 100000000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 100)\n       ov []]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;\n(defn prime? [num]\n  (loop [v (range 2 ^Long num)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 100)\n       ov []]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 (Integer/parseInt num))\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 100)\n       ov []]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 (int num))\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 100)\n       ov []]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 1000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 100)\n       ov []]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 100)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 100)\n       ov []]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 10000000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 100)\n       ov []]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 10000000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 2 100)\n       ov []]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 10000000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 2 100)\n       ov []]\n  (if (empty? iv)\n    (conj ov 1)\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 10000000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 2 100)\n       ov [1]]\n  (if (empty? iv)\n    ov)\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov)))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 10000000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 2 100)\n       ov [1]]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 1000)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 2 100)\n       ov [1]]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 num)\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 2 100)\n       ov [1]]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 (+ num 1))\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 2 100)\n       ov [1]]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 (+ num 1))\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 2 10000)\n       ov [1]]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 (+ num 1))\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 2 1000)\n       ov [1]]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 (+ num 1))\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(loop [iv (range 2 600851475143)\n       ov [1]]\n  (if (empty? iv)\n    ov\n    (recur (rest iv)\n           (if (prime? (first iv))\n             (conj ov (first iv))\n             ov))))&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 (+ num 1))\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(defn get-seq-of-primes [maxnum]\n  (loop [iv (range 2 maxnum)\n         ov [1]]\n    (if (empty? iv)\n      ov\n      (recur (rest iv)\n             (if (prime? (first iv))\n               (conj ov (first iv))\n               ov)))))\n\n;(get-seq-of-primes 600851475143)\n(get-seq-of-primes 1000)&quot; &quot;(defn prime? [num]\n  (loop [v (range 2 (+ num 1))\n         o []]\n    (if (= num (first v))\n      (empty? o)\n      (recur (rest v)\n             (if (= 0 (rem num (first v)))\n               (conj o (first v))\n               o)))))\n\n(defn get-primes [maxnum]\n  (loop [iv (range 2 maxnum)\n         ov [1]]\n    (if (empty? iv)\n      ov\n      (recur (rest iv)\n             (if (prime? (first iv))\n               (conj ov (first iv))\n               ov)))))\n\n(get-primes 1000)&quot;], :remote []}}</component>
</project>

